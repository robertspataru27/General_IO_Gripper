
-- [Note] Only runs once and loads ALL variables
-- [Note] This file is Cached! Empty Cache and Reload after each edit during testing.

-- Init 
CS.UnityEngine.Debug.Log('ToolUI->Gripper Init triggered ')

local PTable = CS.ConfigurationMenu.ConfigurationMenuLuaInterface.Instance.parameterTable
local Instance = CS.ConfigurationMenu.ConfigurationMenuLuaInterface.Instance

-- local function string:startswith(start)
    -- return self:sub(1, #start) == start
-- end

function WriteToPTableForRobotCodeGen()
	local WaitValue = 0
	local WaitMask = 0
	local WaitStart = 0
	local WaitLenth = 16

	for i = 1, 16 do
		local closeEnabled = Instance:GetUiElementByName("ControlClose_enable" .. i).value
		local closeNum = Instance:GetUiElementByName("ControlClose_number" .. i).value
		local closeVal = Instance:GetUiElementByName("ControlClose_value" .. i).value
		local openEnabled = Instance:GetUiElementByName("ControlOpen_enable" .. i).value
		local openNum = Instance:GetUiElementByName("ControlOpen_number" .. i).value
		local openVal = Instance:GetUiElementByName("ControlOpen_value" .. i).value
		local doneEnabled = Instance:GetUiElementByName("FeedbackFinish_enable" .. i).value
		local doneNum = Instance:GetUiElementByName("FeedbackFinish_number" .. i).value
		local doneVal = Instance:GetUiElementByName("FeedbackFinish_value" .. i).value

		-- checking if the DO is enabled. If not then make the number and value invisible
		if(closeEnabled == false) then
			Instance:GetUiElementByName("ControlClose_number" .. i):SetVisible(false)
			Instance:GetUiElementByName("ControlClose_value" .. i):SetVisible(false)
		else
			Instance:GetUiElementByName("ControlClose_number" .. i):SetVisible(true)
			Instance:GetUiElementByName("ControlClose_value" .. i):SetVisible(true)
		end

		-- checking if the DO is enabled. If not, then make the number and value invisible
		if(openEnabled == false) then
			Instance:GetUiElementByName("ControlOpen_number" .. i):SetVisible(false)
			Instance:GetUiElementByName("ControlOpen_value" .. i):SetVisible(false)
		else
			Instance:GetUiElementByName("ControlOpen_number" .. i):SetVisible(true)
			Instance:GetUiElementByName("ControlOpen_value" .. i):SetVisible(true)
		end

		-- checking if the DI is enabled. If not, then make the number and value invisible
		if(doneEnabled == false) then
			Instance:GetUiElementByName("FeedbackFinish_number" .. i):SetVisible(false)
			Instance:GetUiElementByName("FeedbackFinish_value" .. i):SetVisible(false)
		else
			Instance:GetUiElementByName("FeedbackFinish_number" .. i):SetVisible(true)
			Instance:GetUiElementByName("FeedbackFinish_value" .. i):SetVisible(true)
		end

		if doneEnabled == true then -- Only add if doneEnabled is true
			WaitValue = WaitValue + doneVal * 2 ^ doneNum;
			WaitMask = WaitMask + 1 * 2 ^ doneNum;
		end

		PTable:set_Item("ControlClose_enable" .. i, closeEnabled);
		PTable:set_Item("Robot_DO_Close" .. i .. "_N_UI", closeNum);
		PTable:set_Item("Robot_DO_Close" .. i .. "_V_UI", closeVal);
		PTable:set_Item("ControlOpen_enable" .. i, openEnabled);
		PTable:set_Item("Robot_DO_Open" .. i .. "_N_UI", openNum);
		PTable:set_Item("Robot_DO_Open" .. i .. "_V_UI", openVal);
		PTable:set_Item("FeedbackFinish_enable" .. i, doneEnabled);
		PTable:set_Item("Robot_DI_Done" .. i .. "_N_UI", doneNum);
		PTable:set_Item("Robot_DI_Done" .. i .. "_V_UI", doneVal);

		end

	local Robot_DI_Done_Timeout_UI = Instance:GetUiElementByName("TimeoutValue").value
	local Robot_DetectionDelay_UI = Instance:GetUiElementByName("DetectionDelay").value
	local NotEqual_UI = Instance:GetUiElementByName("NotEqual").value

	PTable:set_Item("Robot_DI_Done_Timeout_UI", Robot_DI_Done_Timeout_UI);
	PTable:set_Item("Robot_DetectionDelay_UI", Robot_DetectionDelay_UI);
	PTable:set_Item("NotEqual_UI", NotEqual_UI);
	PTable:set_Item("WaitValue", WaitValue);
	PTable:set_Item("WaitMask", WaitMask);
	PTable:set_Item("WaitStart", WaitStart);
	PTable:set_Item("WaitLenth", WaitLenth);
end

local function ToJsonString(jsonStr)
	local index = string.find(jsonStr, ':[^:]*$')
	return string.sub(jsonStr, 1, index-1)
end

-- Verify PTable is setup (using dummy parameter)
PTable:set_Item('Vender', 'Mantis Robotics Inc')
vendor = PTable:get_Item('Vender')
CS.UnityEngine.Debug.Log(vendor)


-- Load All Variables in PTable
for i,d in pairs(Instance.uiPageOnEdit.uiGroups) do
    
	for j,k in pairs(d.uiElements) do
        UiElement=Instance:GetUiElementByName(k.name)   --find UIelement
        UiElementType=UiElement:GetType().Name

		if(UiElement.name ~= nil) then
			ui_name=UiElement.name
		else
			ui_name = "Unkown"
		end
		
		tag_name=UiElementType..'_'..ui_name..'_values'
		
		CS.UnityEngine.Debug.Log('Group Number: '..i.. 
						'\nElement Number: '..j ..
						'\nUiElement Type: '..UiElementType ..
						'\nUiElement Name: '..ui_name ..
						'\nTag Name: ' .. tag_name)
		
		
		-- [Check Box] [Text Display] [Text Input] [Int Input] [Float Input]
        if (UiElementType=='CheckBox') or 
		     (UiElementType=='Text_Display') or 
		       (UiElementType=='Text_Input') or 
		         (UiElementType=='Int_Input') or
				   (UiElementType == "Float_Input") or
				   (UiElementType == "Dropdown") then
			-- Load Values
            if(PTable:ContainsKey(tag_name)) then
                UiElement.value=PTable:get_Item(tag_name)
			end
			
			
		-- [Transform] [Joint] 
		elseif (UiElementType=='Transform') or 
				(UiElementType=='Joint') then
			if(PTable:ContainsKey(tag_name)) then
                load_values=PTable:get_Item(tag_name)
				n=0
                for value in load_values:gmatch('[^,%s]+') do
                    UiElement.value[n]=tonumber(value)
                    n=n+1
                end 
			end


        -- [Project Tool]
        elseif UiElementType=='ProjectTool' then
            if(PTable:ContainsKey(tag_name..'_transform')) then
                -- Load: Transform
				load_values=PTable:get_Item(tag_name..'_transform')  --load value from PTable
                n=0
                for value in load_values:gmatch('[^,%s]+') do
                    UiElement.value.transform[n]=tonumber(value)
                    n=n+1
				end
				
				-- Load: Tool Name
                if PTable:ContainsKey(UiElementType..'_'..k.name..'_values_toolName') then
                    UiElement.value.toolName=PTable:get_Item(tag_name..'_toolName')
                end
				
				-- Load: TCP Number
                if PTable:ContainsKey(UiElementType..'_'..k.name..'_values_tcpNumber') then
                    UiElement.value.tcpNumber=PTable:get_Item(tag_name..'_tcpNumber')
                end
			end
				
		
		-- [Digital_Input] [Digital_Output]
		elseif (UiElementType == 'Digital_Input') or 
			     (UiElementType == 'Digital_Output') then
			if (PTable:ContainsKey(tag_name)) then
                UiElement:SetValueWithJsonString(ToJsonString(tostring(PTable:get_Item(tag_name))))
            end
			
		
		-- [List]		
		elseif (UiElementType == "List") then
			if(PTable:ContainsKey(tag_name)) then

				local temp_values=PTable:get_Item(tag_name)

				if tostring(temp_values):sub(1,1)=="S" or tostring(temp_values):sub(1,1)=="n" then
					UiElement.value=temp_values
				else
					
					UiElement:SetValueWithJsonString(ToJsonString(tostring(temp_values)))
				end
		


                UiElement:SetValueWithJsonString(ToJsonString(tostring(PTable:get_Item(tag_name))))
            end

		-- [SubMenuLink]
		elseif (UiElementType == "SubMenuLink") then
			CS.UnityEngine.Debug.Log("Error Not Yet Implemented: " .. UiElementType)
			
		else
			CS.UnityEngine.Debug.Log("Unknow Type: " .. UiElementType)
			error("Unknow Type: " .. UiElementType)
		end
		
        UiElement:RefreshUI()
    end
end

WriteToPTableForRobotCodeGen();